@page "/FelhasznaloKezeles"
@using Autokereskedes_BS.Services
@using static Autokereskedes_BS.Services.ExtUserService
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@inject ExtUserService eus
@inject NavigationManager _nav

@attribute [Authorize(Roles = "Administrator")]

<h3>Felhasználó 
    @if (string.IsNullOrEmpty(ID))
    {
        <span> hozzáadása</span>
    }
    else
    {
        <span> szerkesztése </span>
    }
</h3>
<EditForm Model="Input" methor="post" OnValidSubmit="HozzaAd" FormName="AddOrEdit"> 
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.FullName" class="form-control" autocomplete="fullname" aria-required="true" placeholder="name@example.com" />
        <label for="fullname">Teljes név</label>
        <ValidationMessage For="() => Input.FullName" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.UserName" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
        <label for="username">Felhasználónév</label>
        <ValidationMessage For="() => Input.UserName" class="text-danger" />
    </div>
    @if (!Input.PassDisabled)
    {
        <div class="form-floating mb-3">
            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
            <label for="password">Jelszó</label>
            <ValidationMessage For="() => Input.Password" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
            <label for="confirm-password">Jelszó megerősítése</label>
            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
        </div>
    }
    <div class="form-floating mb-3" >
        <label style="margin-bottom:10px" for="email">Aktív</label>
        <InputCheckbox @bind-Value="Input.Active" />
    </div>
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.EMail" class="form-control" autocomplete="email" aria-required="true" placeholder="name@example.com" />
        <label for="email">Email</label>
        <ValidationMessage For="() => Input.EMail" class="text-danger" />
    </div>
    
    @if(!Input.PassDisabled){
        <button type="submit" class="w-100 btn btn-lg btn-primary">Hozzáadás</button>
    }
    else
    {
        <button type="submit" class="w-100 btn btn-lg btn-primary">Frissítés</button>
    }
</EditForm>




@code {
    public AddOrEditUserModel usmo { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [Parameter]public string ID { get; set; }
    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(ID)){
            usmo = eus.GetUserModelById(ID);
            Input.FullName = usmo.FullName;
            Input.UserName = usmo.UserName;
            Input.EMail = usmo.EMail;
            Input.Active = usmo.Active;
            Input.PassDisabled = true;
        }

    }
    private void HozzaAd()
    {
        eus.AddOrUpdateUser(new AddOrEditUserModel(
            ID ?? "",
            Input.FullName,
            Input.UserName,
            Input.Password,
            Input.EMail,
            Input.Active
            ));
        _nav.NavigateTo("/ul",true);
    }
   

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "Teljes Név")]
        public string FullName { get; set; }

        [Required]
        [Display(Name = "Felhasználónév")]
        public string UserName { get; set; }

        public bool PassDisabled { get; set; } = false;

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Jelszó")]
        public string Password { get; set; } = "123456aA!";

        [DataType(DataType.Password)]
        [Display(Name = "Jelszó megerősítése")]
        [Compare("Password", ErrorMessage = "A beírt jelszavak nem egyeznek")]
        public string ConfirmPassword { get; set; } = "123456aA!";

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string EMail { get; set; }

        public bool Active { get; set; } = true;
    }
}
